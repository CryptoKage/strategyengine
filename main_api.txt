# --- main_api.py (Pluggable Strategies - Final Polish & Blue Theme Prep) ---
print("--- Starting Crypto Analysis API with Pluggable Strategies ---")

# --- FIX for Windows ---
import sys
if sys.platform == 'win32': import asyncio; asyncio.set_event_loop_policy(asyncio.WindowsSelectorEventLoopPolicy())

# --- Core Imports ---
import os, json, traceback, glob, importlib.util
import httpx
from typing import Optional, List, Dict, Any
from contextlib import asynccontextmanager
from fastapi import FastAPI, HTTPException, Query, Request
from fastapi.responses import HTMLResponse
from fastapi.templating import Jinja2Templates
from fastapi.middleware.cors import CORSMiddleware
from dotenv import load_dotenv; load_dotenv()

# --- Data Handling & TA Imports ---
try: import pandas as pd; import pandas_ta as ta; import ccxt; DATA_LIBS_AVAILABLE = True
except ImportError: DATA_LIBS_AVAILABLE = False; print("!!! WARNING: Data libs missing (pandas, pandas-ta, ccxt). Functionality limited.")

# --- LLM Import (OpenAI) & Client Initialization (Simplified for local debug) ---
OPENAI_AVAILABLE = False
client_openai = None
http_client_for_openai = None # Keep for lifespan manager consistency

try:
    import openai
    # import httpx # Not strictly needed if client_openai is None
    # OPENAI_API_KEY_FOR_CLIENT = os.getenv("OPENAI_API_KEY") # Key will be checked in call_openai_llm
    # if OPENAI_API_KEY_FOR_CLIENT:
    #     if hasattr(openai, 'AsyncOpenAI'):
    #         # http_client_for_openai = httpx.AsyncClient(proxies=None)
    #         # client_openai = openai.AsyncOpenAI(api_key=OPENAI_API_KEY_FOR_CLIENT, http_client=http_client_for_openai)
    #         # OPENAI_AVAILABLE = True
    #         print("OpenAI client setup will be attempted in call_openai_llm if key exists.")
    #     else: print("!!! WARNING: openai.AsyncOpenAI class not found.")
    # else: print("!!! WARNING: OPENAI_API_KEY not found. LLM features disabled.")
    print("--- OpenAI library IS PRESENT, but client initialization deferred to call_openai_llm (or skipped if no key). ---")
    OPENAI_AVAILABLE = True # Assume library is available, key check in function
except ImportError: print("!!! WARNING: openai library not found. LLM functionality disabled.")
except Exception as e_client_init: print(f"!!! Error during OpenAI import/setup: {e_client_init}")

ENABLED_STRATEGIES = [
    "sma_crossover_strategy",
    "ema_simple_crossover",
    "bollinger_band_mean_reversion", # This was working well for you
    "macd_trend_strategy",
    "rsi_mean_reversion",
    "awesome_oscillator_zero_cross",
    "cci_strategy",
    "chaikin_money_flow",
    "hma_slope_trend_strategy",
    "rate_of_change_rocstrategy",
    "stochastic_oscilator", # Assuming 'stolastc_oscilator.py' is renamed to this
    "trix_signal_line",
    "vwap_cross_strategy",
    # "keltner_channel_breakout", # <-- Commented out because it's buggy
     "donchian_channels_strategy", # <-- Commented out because it's buggy
     "candlestick_trend_filter_strategy", # <-- Commented out because it's buggy
    # "supertrend_following", # <-- Comment out any others that are not ready
]

# --- Globals for loaded strategies ---
LOADED_STRATEGIES_FOR_UI = {}
_INTERNAL_STRATEGY_MODULES = {}

# --- Function to Load Strategies ---

def load_strategies():
    global LOADED_STRATEGIES_FOR_UI, _INTERNAL_STRATEGY_MODULES
    LOADED_STRATEGIES_FOR_UI = {}; _INTERNAL_STRATEGY_MODULES = {}
    strategy_files = glob.glob("strategies/*.py")
    print(f"Found strategy files: {strategy_files}")
    
    for filepath in strategy_files:
        module_name = os.path.splitext(os.path.basename(filepath))[0]
        if module_name.startswith("__"): 
            continue
        
        # --- NEW CHECK: Only load if module is in our enabled list ---
        if module_name not in ENABLED_STRATEGIES:
            print(f"--> Skipping '{module_name}' as it is not in the ENABLED_STRATEGIES list.")
            continue
        # --- END NEW CHECK ---

        try: # --- This is the try statement that needs an except ---
            spec = importlib.util.spec_from_file_location(module_name, filepath)
            if spec is None or spec.loader is None: 
                print(f"!!! Spec error for {filepath}")
                continue # Skip this file

            module = importlib.util.module_from_spec(spec)
            sys.modules[module_name] = module
            spec.loader.exec_module(module)
            
            # Check for all required components
            required_attrs = ['STRATEGY_NAME', 'run_strategy', 'calculate_strategy_indicators', 'STRATEGY_PARAMS_UI', 'get_chart_overlay_data']
            if all(hasattr(module, attr) for attr in required_attrs):
                _INTERNAL_STRATEGY_MODULES[module_name] = module
                LOADED_STRATEGIES_FOR_UI[module_name] = {
                    "name": module.STRATEGY_NAME, 
                    "slug": getattr(module, 'STRATEGY_SLUG', module_name),
                    "description": getattr(module, 'STRATEGY_DESCRIPTION', "No desc."),
                    "params_ui": getattr(module, 'STRATEGY_PARAMS_UI', {}) 
                }
                print(f"Loaded ENABLED strategy: {module.STRATEGY_NAME} (module: {module_name})")
            else: 
                print(f"!!! Invalid strategy file {filepath}: Missing one or more required attributes.")
        except Exception as e: # --- THIS IS THE MISSING except BLOCK ---
            print(f"!!! Error loading strategy file {filepath}: {e}")
            traceback.print_exc() # Print full error for debugging




# --- get_historical_data_and_indicators ---
def get_historical_data_and_indicators(symbol: str, timeframe: str = '4h', limit: int = 100, exchange_name: str = 'okx'):
    # (Function content remains same as previously corrected)
    if not DATA_LIBS_AVAILABLE: return None, "Error: Core data libs missing."
    print(f"API: Fetching {timeframe} candles for {symbol} from {exchange_name}...")
    try:
        exchange_class = getattr(ccxt, exchange_name); exchange = exchange_class({'enableRateLimit': True})
        fetch_limit = limit + 100 # fetch limit for candles
        ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=fetch_limit)
        if not ohlcv: return None, f"No OHLCV data from {exchange_name} for {symbol}."
        df = pd.DataFrame(ohlcv, columns=['timestamp', 'open', 'high', 'low', 'close', 'volume'])
        df['datetime_col'] = pd.to_datetime(df['timestamp'], unit='ms')
        df.set_index('datetime_col', inplace=True)
        for col in ['open', 'high', 'low', 'close', 'volume']: df[col] = pd.to_numeric(df[col], errors='coerce')
        df.dropna(subset=['open','high','low','close','volume'], inplace=True)
        if df.empty or len(df) < 30: return None, "Not enough valid data rows for base indicators."
        df.ta.rsi(close=df['close'], length=14, append=True)
        df.ta.obv(close=df['close'], volume=df['volume'], append=True)
        df.ta.macd(close=df['close'], append=True)
        df.ta.bbands(close=df['close'], append=True)
        print(f"API: Calculated common base indicators for {symbol}.")
        return df.reset_index(drop=True).iloc[-limit:], None
    except ccxt.BadSymbol as e: return None, f"Symbol '{symbol}' not found on {exchange_name}."
    except Exception as e: traceback.print_exc(); return None, f"Candle/Base Indicator Error: {str(e)}"

# --- Helper Function: Call OpenAI LLM (Uses global client_openai) ---
async def call_openai_llm(prompt_text: str, model: str = "gpt-3.5-turbo"):
    global client_openai, http_client_for_openai # Access global instances
    
    if not OPENAI_AVAILABLE:
        return "LLM Error: OpenAI library not imported correctly at startup."
    
    # Initialize client if not already done (e.g., if key was set after startup)
    if client_openai is None:
        api_key_for_call = os.getenv("OPENAI_API_KEY")
        if api_key_for_call and hasattr(openai, 'AsyncOpenAI'):
            print("--- Attempting to initialize OpenAI client within call_openai_llm ---")
            try:
                # Check for system proxy environment variables
                http_proxy = os.getenv('HTTP_PROXY')
                https_proxy = os.getenv('HTTPS_PROXY')
                proxies_to_use = None
                if http_proxy or https_proxy:
                    proxies_to_use = {"http://": http_proxy, "https://": https_proxy}
                
                # Close existing http_client if it exists before creating a new one
                if http_client_for_openai: await http_client_for_openai.aclose()
                http_client_for_openai = httpx.AsyncClient(proxies=proxies_to_use) # This might still error if httpx is old

                client_openai = openai.AsyncOpenAI(api_key=api_key_for_call, http_client=http_client_for_openai)
                print("OpenAI client initialized for this call.")
            except TypeError as te: # Catch specific TypeError for proxies
                 if "got an unexpected keyword argument 'proxies'" in str(te):
                     print("!!! Error initializing httpx.AsyncClient with 'proxies'. Trying without.")
                     if http_client_for_openai: await http_client_for_openai.aclose() # Close previous if any
                     http_client_for_openai = httpx.AsyncClient() # Initialize without proxies
                     client_openai = openai.AsyncOpenAI(api_key=api_key_for_call, http_client=http_client_for_openai)
                     print("OpenAI client initialized (without explicit proxy handling due to error).")
                 else: raise # Re-raise other TypeErrors
            except Exception as e_init_late:
                print(f"!!! Late OpenAI client initialization failed: {e_init_late}")
                return "LLM Error: Client late-init failed."
        else:
            return "LLM Error: OPENAI_API_KEY missing or OpenAI library too old for AsyncOpenAI."

    if client_openai is None: return "LLM Error: OpenAI client is still None."


    print(f"API: Sending prompt to OpenAI model: {model} via initialized client...")
    try:
        response = await client_openai.chat.completions.create(
            model=model,
            messages=[ {"role": "system", "content": "You are a concise crypto market analyst providing insights based on the data given."},
                       {"role": "user", "content": prompt_text} ],
            max_tokens=300, temperature=0.7 )
        content = response.choices[0].message.content.strip()
        print("API: Received response from OpenAI.")
        return content
    except Exception as e: print(f"!!! API ERROR (General) calling OpenAI: {e}"); traceback.print_exc(); return f"LLM Error: {str(e)}"

# --- FastAPI Lifespan Event Handler ---
@asynccontextmanager
async def lifespan(app_instance: FastAPI):
    global http_client_for_openai # Make sure it's accessible for closing
    print("--- FastAPI app startup: Loading strategies... ---")
    load_strategies()
    if not LOADED_STRATEGIES_FOR_UI: print("!!! WARNING: No strategies were loaded.")
    yield
    print("--- FastAPI app shutdown ---")
    if http_client_for_openai: # Ensure it exists before trying to close
        await http_client_for_openai.aclose()
        print("--- Closed httpx client for OpenAI (if initialized) ---")

app = FastAPI(title="Crypto Analysis API with Pluggable Strategies", lifespan=lifespan)
origins = [
    # Add your Vercel React app's production URL here when you have it
    # e.g., "https://www.hyper-strategies.com",
    # Add the Vercel preview deployment URL pattern
    # e.g., "https://hyper-strategies-react-*.vercel.app"
    "http://localhost:3000", # For local React development
    "http://localhost:5173", # For local Vite/SvelteKit development
    # Using a wildcard for now is okay for testing, but not recommended for production
    "*" 
]

app.add_middleware(
    CORSMiddleware,
    allow_origins=origins,
    allow_credentials=True,
    allow_methods=["*"], # Allows all methods (GET, POST, etc.)
    allow_headers=["*"], # Allows all headers
)
templates = Jinja2Templates(directory="templates")

# --- UI Endpoint ---
@app.get("/ui", response_class=HTMLResponse)
async def get_ui_page(request: Request):
    if not LOADED_STRATEGIES_FOR_UI and not _INTERNAL_STRATEGY_MODULES: load_strategies()
    return templates.TemplateResponse("index.html", {"request": request, "analysis_results": None, "error_message": None, "request_params": None, "available_strategies": LOADED_STRATEGIES_FOR_UI})

# --- Endpoint to Handle Form Submission ---
@app.get("/analyze_ui_with_strategy", response_class=HTMLResponse)
async def analyze_asset_for_ui_with_strategy(
    request: Request, exchange: str = Query("okx"), symbol: str = Query("BTC-USDT-SWAP"),
    timeframe: str = Query("4h"), strategy_module_name: Optional[str] = Query(None),
    user_prompt_suffix: Optional[str] = Query(None)
):
    # (Function content for fetching data, running strategy, preparing results remains same as previous correct version)
    # ...
    print(f"UI Request: Ex={exchange}, Sym={symbol}, TF={timeframe}, StratFile={strategy_module_name}")
    analysis_results_data=None; error_message_for_ui=None; raw_ohlcv_for_chart=None
    strategy_signal_object={"signal":"N/A","details":"Strat not run."}; strategy_specific_chart_data={}
    strat_params_from_form={}; selected_strategy_ui_info=None; df_with_all_indicators=None

    df_base_with_ts_col, error_hist = get_historical_data_and_indicators(symbol, timeframe, limit=200, exchange_name=exchange)
    if error_hist: error_message_for_ui = f"Candle/Base Indicator data error: {error_hist}"
    elif df_base_with_ts_col is None or df_base_with_ts_col.empty: error_message_for_ui = "No base indicator data."
    else:
        raw_ohlcv_for_chart = df_base_with_ts_col[['timestamp', 'open', 'high', 'low', 'close', 'volume']].to_dict(orient='records')
        df_for_strategy_calc = df_base_with_ts_col.set_index(pd.to_datetime(df_base_with_ts_col['timestamp'], unit='ms'))
        df_with_all_indicators = df_for_strategy_calc.copy()

        if strategy_module_name and strategy_module_name in LOADED_STRATEGIES_FOR_UI:
            selected_strategy_ui_info = LOADED_STRATEGIES_FOR_UI[strategy_module_name]
            strategy_module = _INTERNAL_STRATEGY_MODULES.get(strategy_module_name)
            if strategy_module:
                if hasattr(strategy_module, 'STRATEGY_PARAMS_UI'):
                    for param_key, param_info_ui in strategy_module.STRATEGY_PARAMS_UI.items():
                        value_str = request.query_params.get(param_key); default_val = param_info_ui.get("default")
                        try:
                            param_type = param_info_ui.get("type", "text")
                            if value_str is not None:
                                if param_type == "number":
                                    try: parsed_val = float(value_str); strat_params_from_form[param_key] = int(parsed_val) if parsed_val.is_integer() else parsed_val
                                    except ValueError: strat_params_from_form[param_key] = default_val
                                else: strat_params_from_form[param_key] = value_str
                            else: strat_params_from_form[param_key] = default_val
                        except ValueError: strat_params_from_form[param_key] = default_val
                df_with_all_indicators = strategy_module.calculate_strategy_indicators(df_with_all_indicators.copy(), strat_params_from_form)
                strategy_signal_object = strategy_module.run_strategy(df_with_all_indicators, strat_params_from_form)
                if hasattr(strategy_module, 'get_chart_overlay_data'):
                    strategy_specific_chart_data = strategy_module.get_chart_overlay_data(df_with_all_indicators, strat_params_from_form)
            else: error_message_for_ui = f"Strat module '{strategy_module_name}' exec error."
        elif strategy_module_name: error_message_for_ui = f"Strat '{strategy_module_name}' not loaded."

        latest_indicators_dict = {}
        target_df_for_latest = df_with_all_indicators
        if target_df_for_latest is not None and not target_df_for_latest.empty:
            if not isinstance(target_df_for_latest.index, pd.DatetimeIndex):
                 if 'timestamp' in target_df_for_latest.columns: target_df_for_latest = target_df_for_latest.set_index(pd.to_datetime(target_df_for_latest['timestamp'], unit='ms'))
                 elif 'datetime_col' in target_df_for_latest.columns: target_df_for_latest = target_df_for_latest.set_index(pd.to_datetime(target_df_for_latest['datetime_col']))
            try:
                latest_indicators_dict = { "Close": f"{target_df_for_latest['close'].iloc[-1]:.4f}" if 'close' in target_df_for_latest else "N/A" }
                for ind_key in ['RSI_14', 'OBV', 'MACD_12_26_9', 'MACDs_12_26_9', 'BBL_20_2.0', 'BBM_20_2.0', 'BBU_20_2.0']:
                    if ind_key in target_df_for_latest.columns and not target_df_for_latest[ind_key].empty and not target_df_for_latest[ind_key].iloc[-1:].isna().any(): latest_indicators_dict[ind_key] = f"{target_df_for_latest[ind_key].iloc[-1]:.2f}"
                    else: latest_indicators_dict[ind_key] = "N/A"
                if selected_strategy_ui_info:
                    base_cols = set(df_for_strategy_calc.columns); all_cols = set(target_df_for_latest.columns); strat_added_cols = list(all_cols - base_cols)
                    for col_name in strat_added_cols:
                        if col_name not in latest_indicators_dict and col_name in target_df_for_latest and not target_df_for_latest[col_name].empty and not target_df_for_latest[col_name].iloc[-1:].isna().any():
                            if pd.api.types.is_numeric_dtype(target_df_for_latest[col_name]): latest_indicators_dict[col_name] = f"{target_df_for_latest[col_name].iloc[-1]:.4f}"
                            else: latest_indicators_dict[col_name] = str(target_df_for_latest[col_name].iloc[-1])
            except IndexError: latest_indicators_dict = {"Error": "Not enough data for latest values"}
            except Exception as e_ind: print(f"Populating indicators error: {e_ind}"); latest_indicators_dict = {"Error": str(e_ind)}

            print(f"--- DEBUG: latest_indicators_dict BEFORE sending to template ---")
            print(json.dumps(latest_indicators_dict, indent=2))
            print(f"--- END DEBUG latest_indicators_dict ---")

        indicator_summary = "\n".join([f"- {k}: {v}" for k, v in latest_indicators_dict.items()])
        prompt_strategy_name = selected_strategy_ui_info["name"] if selected_strategy_ui_info else "None"
        prompt_signal = strategy_signal_object.get("signal", "N/A"); prompt_signal_details = strategy_signal_object.get("details", "")
        final_prompt = ( f"Analyze {symbol} ({exchange} {timeframe}). Strategy: {prompt_strategy_name}. Signal: {prompt_signal} ({prompt_signal_details}).\nIndicators:\n{indicator_summary}\n\n" )
        final_prompt += user_prompt_suffix or "Provide a concise market analysis and tactical insight based on all the data."
        
        # Use the placeholder for LLM call
        llm_analysis_text = "LLM Analysis is temporarily disabled for local chart debugging." # Placeholder
        # llm_analysis_text = await call_openai_llm(final_prompt) # Actual call commented out

        analysis_results_data = {
            "asset_analyzed": symbol, "exchange": exchange, "timeframe": timeframe,
            "latest_indicators": latest_indicators_dict, "llm_analysis": llm_analysis_text,
            "strategy_name": prompt_strategy_name, "strategy_signal": strategy_signal_object,
            "raw_ohlcv_data_for_chart": raw_ohlcv_for_chart, "strategy_specific_chart_data": strategy_specific_chart_data }

    request_params = {"exchange": exchange, "symbol": symbol, "timeframe": timeframe, "strategy_module_name": strategy_module_name, "user_prompt_suffix": user_prompt_suffix}
    if selected_strategy_ui_info and strat_params_from_form: request_params.update(strat_params_from_form)

    # --- DEBUG PRINT for data sent to template ---
    print("---- DEBUG: Data being sent to template ----")
    temp_results_for_print = analysis_results_data.copy() if analysis_results_data else {}
    if temp_results_for_print.get("raw_ohlcv_data_for_chart"): temp_results_for_print["raw_ohlcv_data_for_chart"] = f"Exists, {len(temp_results_for_print['raw_ohlcv_data_for_chart'])} items."
    if temp_results_for_print.get("strategy_specific_chart_data"): temp_results_for_print["strategy_specific_chart_data"] = f"Exists, keys: {list(temp_results_for_print['strategy_specific_chart_data'].keys())}"
    print(f"error_message: {error_message_for_ui}"); print(f"analysis_results (condensed): {json.dumps(temp_results_for_print, default=str)}"); print(f"request_params: {request_params}"); print(f"available_strategies (keys): {list(LOADED_STRATEGIES_FOR_UI.keys())}"); print("--------------------------------------")

    return templates.TemplateResponse("index.html", {
        "request": request, "analysis_results": analysis_results_data,
        "error_message": error_message_for_ui, "request_params": request_params,
        "available_strategies": LOADED_STRATEGIES_FOR_UI
    })

# --- Run Command ---
if __name__ == "__main__":
    print("To run: uvicorn main_api:app --reload --port 8000")




    bkup requirements

    aiodns==3.5.0
aiohappyeyeballs==2.6.1
aiohttp==3.12.13
aiosignal==1.3.2
annotated-types==0.7.0
anyio==4.9.0
attrs==25.3.0
ccxt==4.4.90
certifi==2025.6.15
cffi==1.17.1
charset-normalizer==3.4.2
click==8.2.1
colorama==0.4.6
cryptography==45.0.4
discord.py==2.5.2
distro==1.9.0
fastapi==0.115.13
frozenlist==1.7.0
h11==0.16.0
httpcore==1.0.9
httptools==0.6.4
httpx==0.28.1
idna==3.10
Jinja2==3.1.6
jiter==0.10.0
MarkupSafe==3.0.2
multidict==6.5.0
numpy==1.24.4
openai==1.14.3
pandas==2.3.0
pandas_ta==0.3.14b0
propcache==0.3.2
pycares==4.9.0
pycparser==2.22
pydantic==2.11.7
pydantic_core==2.33.2
python-dateutil==2.9.0.post0
python-dotenv==1.1.1
python-multipart==0.0.20
pytz==2025.2
PyYAML==6.0.2
requests==2.32.4
six==1.17.0
sniffio==1.3.1
starlette==0.46.2
tqdm==4.67.1
typing-inspection==0.4.1
typing_extensions==4.14.0
tzdata==2025.2
urllib3==2.5.0
uvicorn==0.34.3
watchfiles==1.1.0
websockets==15.0.1
yarl==1.20.1


